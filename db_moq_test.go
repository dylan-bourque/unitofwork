// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package unitofwork

import (
	"database/sql"
	"sync"
)

var (
	lockDbMockExec     sync.RWMutex
	lockDbMockQuery    sync.RWMutex
	lockDbMockQueryRow sync.RWMutex
)

// Ensure, that DbMock does implement Db.
// If this is not the case, regenerate this file with moq.
var _ Db = &DbMock{}

// DbMock is a mock implementation of Db.
//
//     func TestSomethingThatUsesDb(t *testing.T) {
//
//         // make and configure a mocked Db
//         mockedDb := &DbMock{
//             ExecFunc: func(command string, args ...interface{}) (sql.Result, error) {
// 	               panic("mock out the Exec method")
//             },
//             QueryFunc: func(query string, args ...interface{}) (*sql.Rows, error) {
// 	               panic("mock out the Query method")
//             },
//             QueryRowFunc: func(query string, args ...interface{}) *sql.Row {
// 	               panic("mock out the QueryRow method")
//             },
//         }
//
//         // use mockedDb in code that requires Db
//         // and then make assertions.
//
//     }
type DbMock struct {
	// ExecFunc mocks the Exec method.
	ExecFunc func(command string, args ...interface{}) (sql.Result, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(query string, args ...interface{}) (*sql.Rows, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(query string, args ...interface{}) *sql.Row

	// calls tracks calls to the methods.
	calls struct {
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Command is the command argument value.
			Command string
			// Args is the args argument value.
			Args []interface{}
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
	}
}

// Exec calls ExecFunc.
func (mock *DbMock) Exec(command string, args ...interface{}) (sql.Result, error) {
	if mock.ExecFunc == nil {
		panic("DbMock.ExecFunc: method is nil but Db.Exec was just called")
	}
	callInfo := struct {
		Command string
		Args    []interface{}
	}{
		Command: command,
		Args:    args,
	}
	lockDbMockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	lockDbMockExec.Unlock()
	return mock.ExecFunc(command, args...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//     len(mockedDb.ExecCalls())
func (mock *DbMock) ExecCalls() []struct {
	Command string
	Args    []interface{}
} {
	var calls []struct {
		Command string
		Args    []interface{}
	}
	lockDbMockExec.RLock()
	calls = mock.calls.Exec
	lockDbMockExec.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *DbMock) Query(query string, args ...interface{}) (*sql.Rows, error) {
	if mock.QueryFunc == nil {
		panic("DbMock.QueryFunc: method is nil but Db.Query was just called")
	}
	callInfo := struct {
		Query string
		Args  []interface{}
	}{
		Query: query,
		Args:  args,
	}
	lockDbMockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	lockDbMockQuery.Unlock()
	return mock.QueryFunc(query, args...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//     len(mockedDb.QueryCalls())
func (mock *DbMock) QueryCalls() []struct {
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Query string
		Args  []interface{}
	}
	lockDbMockQuery.RLock()
	calls = mock.calls.Query
	lockDbMockQuery.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *DbMock) QueryRow(query string, args ...interface{}) *sql.Row {
	if mock.QueryRowFunc == nil {
		panic("DbMock.QueryRowFunc: method is nil but Db.QueryRow was just called")
	}
	callInfo := struct {
		Query string
		Args  []interface{}
	}{
		Query: query,
		Args:  args,
	}
	lockDbMockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	lockDbMockQueryRow.Unlock()
	return mock.QueryRowFunc(query, args...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//     len(mockedDb.QueryRowCalls())
func (mock *DbMock) QueryRowCalls() []struct {
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Query string
		Args  []interface{}
	}
	lockDbMockQueryRow.RLock()
	calls = mock.calls.QueryRow
	lockDbMockQueryRow.RUnlock()
	return calls
}
