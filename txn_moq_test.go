// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package unitofwork

import (
	"database/sql"
	"sync"
)

var (
	lockTxnMockCommit   sync.RWMutex
	lockTxnMockExec     sync.RWMutex
	lockTxnMockQuery    sync.RWMutex
	lockTxnMockQueryRow sync.RWMutex
	lockTxnMockRollback sync.RWMutex
)

// Ensure, that TxnMock does implement Txn.
// If this is not the case, regenerate this file with moq.
var _ Txn = &TxnMock{}

// TxnMock is a mock implementation of Txn.
//
//     func TestSomethingThatUsesTxn(t *testing.T) {
//
//         // make and configure a mocked Txn
//         mockedTxn := &TxnMock{
//             CommitFunc: func() error {
// 	               panic("mock out the Commit method")
//             },
//             ExecFunc: func(command string, args ...interface{}) (sql.Result, error) {
// 	               panic("mock out the Exec method")
//             },
//             QueryFunc: func(query string, args ...interface{}) (*sql.Rows, error) {
// 	               panic("mock out the Query method")
//             },
//             QueryRowFunc: func(query string, args ...interface{}) *sql.Row {
// 	               panic("mock out the QueryRow method")
//             },
//             RollbackFunc: func() error {
// 	               panic("mock out the Rollback method")
//             },
//         }
//
//         // use mockedTxn in code that requires Txn
//         // and then make assertions.
//
//     }
type TxnMock struct {
	// CommitFunc mocks the Commit method.
	CommitFunc func() error

	// ExecFunc mocks the Exec method.
	ExecFunc func(command string, args ...interface{}) (sql.Result, error)

	// QueryFunc mocks the Query method.
	QueryFunc func(query string, args ...interface{}) (*sql.Rows, error)

	// QueryRowFunc mocks the QueryRow method.
	QueryRowFunc func(query string, args ...interface{}) *sql.Row

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Commit holds details about calls to the Commit method.
		Commit []struct {
		}
		// Exec holds details about calls to the Exec method.
		Exec []struct {
			// Command is the command argument value.
			Command string
			// Args is the args argument value.
			Args []interface{}
		}
		// Query holds details about calls to the Query method.
		Query []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
		// QueryRow holds details about calls to the QueryRow method.
		QueryRow []struct {
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
		}
	}
}

// Commit calls CommitFunc.
func (mock *TxnMock) Commit() error {
	if mock.CommitFunc == nil {
		panic("TxnMock.CommitFunc: method is nil but Txn.Commit was just called")
	}
	callInfo := struct {
	}{}
	lockTxnMockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	lockTxnMockCommit.Unlock()
	return mock.CommitFunc()
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//     len(mockedTxn.CommitCalls())
func (mock *TxnMock) CommitCalls() []struct {
} {
	var calls []struct {
	}
	lockTxnMockCommit.RLock()
	calls = mock.calls.Commit
	lockTxnMockCommit.RUnlock()
	return calls
}

// Exec calls ExecFunc.
func (mock *TxnMock) Exec(command string, args ...interface{}) (sql.Result, error) {
	if mock.ExecFunc == nil {
		panic("TxnMock.ExecFunc: method is nil but Txn.Exec was just called")
	}
	callInfo := struct {
		Command string
		Args    []interface{}
	}{
		Command: command,
		Args:    args,
	}
	lockTxnMockExec.Lock()
	mock.calls.Exec = append(mock.calls.Exec, callInfo)
	lockTxnMockExec.Unlock()
	return mock.ExecFunc(command, args...)
}

// ExecCalls gets all the calls that were made to Exec.
// Check the length with:
//     len(mockedTxn.ExecCalls())
func (mock *TxnMock) ExecCalls() []struct {
	Command string
	Args    []interface{}
} {
	var calls []struct {
		Command string
		Args    []interface{}
	}
	lockTxnMockExec.RLock()
	calls = mock.calls.Exec
	lockTxnMockExec.RUnlock()
	return calls
}

// Query calls QueryFunc.
func (mock *TxnMock) Query(query string, args ...interface{}) (*sql.Rows, error) {
	if mock.QueryFunc == nil {
		panic("TxnMock.QueryFunc: method is nil but Txn.Query was just called")
	}
	callInfo := struct {
		Query string
		Args  []interface{}
	}{
		Query: query,
		Args:  args,
	}
	lockTxnMockQuery.Lock()
	mock.calls.Query = append(mock.calls.Query, callInfo)
	lockTxnMockQuery.Unlock()
	return mock.QueryFunc(query, args...)
}

// QueryCalls gets all the calls that were made to Query.
// Check the length with:
//     len(mockedTxn.QueryCalls())
func (mock *TxnMock) QueryCalls() []struct {
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Query string
		Args  []interface{}
	}
	lockTxnMockQuery.RLock()
	calls = mock.calls.Query
	lockTxnMockQuery.RUnlock()
	return calls
}

// QueryRow calls QueryRowFunc.
func (mock *TxnMock) QueryRow(query string, args ...interface{}) *sql.Row {
	if mock.QueryRowFunc == nil {
		panic("TxnMock.QueryRowFunc: method is nil but Txn.QueryRow was just called")
	}
	callInfo := struct {
		Query string
		Args  []interface{}
	}{
		Query: query,
		Args:  args,
	}
	lockTxnMockQueryRow.Lock()
	mock.calls.QueryRow = append(mock.calls.QueryRow, callInfo)
	lockTxnMockQueryRow.Unlock()
	return mock.QueryRowFunc(query, args...)
}

// QueryRowCalls gets all the calls that were made to QueryRow.
// Check the length with:
//     len(mockedTxn.QueryRowCalls())
func (mock *TxnMock) QueryRowCalls() []struct {
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Query string
		Args  []interface{}
	}
	lockTxnMockQueryRow.RLock()
	calls = mock.calls.QueryRow
	lockTxnMockQueryRow.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *TxnMock) Rollback() error {
	if mock.RollbackFunc == nil {
		panic("TxnMock.RollbackFunc: method is nil but Txn.Rollback was just called")
	}
	callInfo := struct {
	}{}
	lockTxnMockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	lockTxnMockRollback.Unlock()
	return mock.RollbackFunc()
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//     len(mockedTxn.RollbackCalls())
func (mock *TxnMock) RollbackCalls() []struct {
} {
	var calls []struct {
	}
	lockTxnMockRollback.RLock()
	calls = mock.calls.Rollback
	lockTxnMockRollback.RUnlock()
	return calls
}
